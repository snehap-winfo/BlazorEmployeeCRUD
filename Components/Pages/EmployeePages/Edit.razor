@page "/employees/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorEmployeeCRUD.Models
@inject IDbContextFactory<BlazorEmployeeCRUD.Data.AppDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Employee</h2>
<hr />
@if (Employee is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Employee" OnValidSubmit="UpdateEmployee" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Employee.Id" value="@Employee.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Employee.Name" class="form-control" />
                    <ValidationMessage For="() => Employee.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="position" class="form-label">Position:</label>
                    <InputText id="position" @bind-Value="Employee.Position" class="form-control" />
                    <ValidationMessage For="() => Employee.Position" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dob" class="form-label">DOB:</label>
                    <InputDate id="dob" @bind-Value="Employee.DOB" class="form-control" />
                    <ValidationMessage For="() => Employee.DOB" class="text-danger" />
                </div>


                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Employee? Employee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        

        Employee ??= await context.Employee.FirstOrDefaultAsync(m => m.Id == Id);

        if (Employee is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
        
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        Employee.Status = true;
        context.Attach(Employee!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EmployeeExists(Employee!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/employees");
    }

    private bool EmployeeExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Employee.Any(e => e.Id == id);
    }
}



@* @page "/employees/edit"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BlazorEmployeeCRUD.Data.AppDBContext> DbFactory
@inject NavigationManager NavigationManager
@using BlazorEmployeeCRUD.Models

<h1>Edit Employee</h1>

@if (employee == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="employee" OnValidSubmit="UpdateEmployee" FormName="EditForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="mb-3">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="employee.Name" />
        </div>

        <div class="mb-3">
            <label>Position</label>
            <InputText class="form-control" @bind-Value="employee.Position" />
        </div>

        <div class="mb-3">
            <label>DOB</label>
            <InputDate class="form-control" @bind-Value="employee.DOB" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <a class="btn btn-secondary" href="/employees">Back</a>
    </EditForm>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }


    private Employee? employee{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var contextt = DbFactory.CreateDbContext();
        employee ??= await contextt.Employee.FirstOrDefaultAsync(e => e.Id == Id);
        if (employee == null) NavigationManager.NavigateTo("/employees");
    }

    private async Task UpdateEmployee()
    {
        if (employee == null) return;

        await using var contextt = DbFactory.CreateDbContext();
         var dbEmp = await contextt.Employee.FirstOrDefaultAsync(e => e.Id ==employee.Id);
        if (dbEmp == null) return;

        dbEmp.Name = employee.Name;
        dbEmp.Position = employee.Position;
        dbEmp.DOB = employee.DOB;
        bool hasChanges = contextt.ChangeTracker.HasChanges();


        //context.Attach(employee).State = EntityState.Modified;
        if (hasChanges)
        await contextt.SaveChangesAsync();
        NavigationManager.NavigateTo("/employees");
    }
} *@

